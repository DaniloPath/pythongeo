Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V1HzMeBeX3XjPautTwRsaR6UtYhrZEu7
"""

# Install pack geopands in packs python colab

!pip install geopandas

# Import pack python manege files and folders on sistem

import os 
# Define path to folder
input_folder = r"/content/drive/MyDrive/Colab/L2_data/NLS/2018/L4/L41/L4132R.shp"

#Join folder path and filename 
fp = os.path.join(input_folder, "m_L4132R_p.shp")

print (fp)

#Reading Shapefile
import geopandas as gpd

data = gpd.read_file(fp)

type(data)

data.head()

# Check columns names

data.columns.values

# Use only names useful

data = data[['RYHMA', 'LUOKKA', 'geometry']]

# Define news columns names in a Dicionary

colnames = {'RYHMA':'GROUP', 'LUOKKA':'CLASS'}

# Rename columns

data.rename(columns=colnames, inplace=True)

#Checked out

data.head()

# Checked numbers of elements

print("Number of rows ", len(data['CLASS']))
print("Number of classes ", data['CLASS'].nunique()) # Calc only values unique
print("Number of groups ", data['GROUP'].nunique())

# Show all alemets and your geometrys.
data.plot()

data['geometry'].head()

# Acess a geometry first row of data

data.at[0, "geometry"]

# Print informations about area

print(f"Área:", round(data.at[0, "geometry"].area,2),"square meters")

# Let´s go show first fives in datas

for index, row in data[0:5].iterrows():
  #Get a area from the shapely-object stored in the geometry-column
  poli_area = row['geometry'].area
  
  #Print info
  print("Polygon area at index {index} is: {area:0f} square meters".format(index=index, area=poli_area))

data.area

# Create new columns into area geometry

data['AREA'] = data.area

data['AREA']

# Let´s check what is max, min and mean of values columns area

round(data['AREA'].max(),3)

round(data['AREA'].min(),3)

round(data['AREA'].mean(),3)

# WRITING DATA INTO A SHPEFILES

# Select a class, use class 36200 as 'lake water'.

selection = data.loc[data["CLASS"]==36200]

# Checkout

selection.plot()

# Create a output path for the data
output_folder = r"/content/drive/MyDrive/Colab/L2_data/"
output_fp = os.path.join(output_folder, "Class_36200.shp")

# Write those rows into a new file (the default output file format is Shapefile)
selection.to_file(output_fp)

# Read output shapefile
temp = gpd.read_file(output_fp)

temp.head()

# We can also plot the data for a visual check

temp.plot()

# GROUPING THE GEODATAFRAME

# Put data initial our project

data.head()

# Print all unique values in the column
data["CLASS"].unique()

# Group the data by class
grouped = data.groupby('CLASS')

#Let's see what we have
grouped

#Check group keys:

grouped.groups.keys()

# Iterate over the grouped object

for key, group in grouped:
  # Let's check how many rows each group has:
  print("Tarrain class:", key)
  print("Number of rows: ", len(group), "\n")

group.head()

#Check also the data type of the group:
type(group)

# SALVING MULTIPLE OUTPUT FILES
basename = "terrain"
key = 36200

'''OPTION 1. Concatenating using the `+` operator:
out_fp = basename + "_" + str(key) + ".shp"

OPTION 2. Positional formatting using `%` operator
out_fp = "%s_%s.shp" %(basename, key)
    
OPTION 3. Positional formatting using `.format()`
out_fp = "{}_{}.shp".format(basename, key)'''

# Create a new folder called 'Results' 
result_folder = os.path.join(output_folder, 'Results')

# Check if the folder exists already
if not os.path.exists(result_folder):
  print(r"Creating a folder for Results...")
  # If it does not exist, create one
  os.makedirs(result_folder)
else:
  print(r"Results folder exists already")

# Iterate over the groups
for key, group in grouped:
  # Format the filename 
  output_name = "tarrain_{}.shp".format(key)

  # Print information about the process
  print("Saving files", os.path.basename(output_name))
  # Create an output path
  outpath = os.path.join(result_folder, output_name)

  # Export the data
  group.to_file(outpath)

# Save data to csv

area_info = grouped.sum().round()

area_info

# Create an output path (save area info to csv using pandas)

area_info.to_csv(os.path.join(output_folder, "terrain_class_area.csv"), header=True)
